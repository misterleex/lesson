git add 000.txt : 올림
git commit -m "메시지" : 스테이징
git log --all --oneline : 파일 목록 체크(파일이름 있음)
git status : 상태 체크

git difftool : 
git difftool 파일이름 : > > 확장프로그램에 있어서 사용안함

git push : 원격서버에 전송
branch : 원본 살려놓고 테스트 복사본만드는 과정

git branch 사본명  > git switch 사본명

git switch 파일명 : 메인과 다른파일 변경 가능... 

git log --oneline --all --graph : 변경사항 일괄 확인

{브랜치를 원본에 합치는 작업}
1. git switch main
2. git merge 사본명 (근데 동일 줄에서 수정이 일어날시 컴퓨터 충돌 발생함)conflict ending > 원하는 것 선택
3. git add . > git commit -m '000'

여러명이 만들시 원본 만들고 > 브랜치 따서 > 머지 시킴

합치는 방식 : git merge --no-ff

원본에 통일시키는 방식 : fast-forword merge(?)

git branch -d 사본명 : 브랜치 삭제
git rebase & merge  : 간단한브랜치를 원본으로 합치는 방식으로 깔끔하다. / 단점 : 컨플릭트가 자주 발생함

git merge --squash : 리베이스와 비슷하나 곁다리 브랜치를 다 삭제하고 원본 브랜치만 남기는 작업
메인 로그만 남고 나머지 로그는 삭제시킴 / 비쥬얼적인 영역이다.
3way merge : 중요한 가지는 남겨놓는 방식

[복구/시점이동]

git restore 파일명 (마지막 커밋상태로 복구)
git restore --staged 파일명 (스티이징 취소)

git revert 파일아이디 (복구, 취소 가능)

git reset --hard 파일아이디 (완벽 리셋/ 협업 할때는 쓰면 안됨)
git reset --soft 파일아이디 (리셋은 되나 이후 파일들은 스테이징 상태로 남아있음)
git reset --mixed 파일아이디(리셋은 리셋인데 기존 파일 남아있음)

[repository] : 저장소
온라인 리포짓토리 : 깃헙 : 원격 저장소

로컬저장소에 먼저 저장 > 온라인 저장

github 리포짓토리에 주소를 따오고 

git push -u (주소) main 입력 

주소 : 변수로 입력가능 : git remote add (변수명) (주소)

근데 git push -u (주소) 이렇게 입력했으면 주소 앞으로 기억하라는 명령어 이므로 처음 1회만 -u 입력하면
다음부턴 git push 만 해도 원격 저장됨.....

[브랜치 머지 전 검토하고 싶어함]

온라인에서 하는 방법 : pull request 에서 하면 됩니다. 로컬에서 해도 되고

[팀장이 될 수 있는 gitflow]

(겁쟁이 전략)
전략 : main 0.5v
        develop
            feature/guild
                            feature/friend 
        어느정도 완성되면
        release(기일 임박전에 마지막 테스트)
    main 1.0v
        burg 발생
        hotfix
    main 1.0.1v

(상남자 전략 trunk-based)
메인 한가닥에서 필요한것만 브랜치 내서 합치는 전략 > 빠르나 문제가 많을 수 있다.


